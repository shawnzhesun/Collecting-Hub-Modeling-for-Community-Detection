Thank you for your interests in CODICIL. 

=== Code ===
Currently the implementation of CODICIL workflow includes two steps: 1) generating the content graph, 2) combining similarity values and simplifying the graph.

++ 1. Generating the content graph ++
The first step is implemented with two Python scripts. Run gen_content_nn.py first, and then content_nn_to_metis.py to get a METIS-like content graph file (see "Input Format" below if you are not familiar with the METIS format"). 
Alternatively, Lucene provides a functionality to return the _k_ most similar documents for each query document (imagine each content vector is a document) based on a modified TF-IDF similarity, and we can use this to create the content graph as well.

Usage:  gen_content_nn.py [graphfilename] [contentlistname] [#ofnodes] [#ofwords/features/terms]
        content_nn_to_metis.py [outputfilename]
        where outputfilename is the file of KNN lists outputted by gen_content_nn
		Other parameters are optional
Notice that both graph file and  content list file are formatted in METIS format.

++ 2. Combining similarity values and simplifying the graph ++
The second step is implemented in C, largely based on the code for Venu Satuluri's local sparsification work (SIGMOD'12). The sources are in the sparsify/ folder, and a simple "make" should be sufficient.

For command-line usage, please refer to docstrings, or simply execute the script/binary without any argument.

Usage:  sparsify [graphfilename] [SCgraphfilename] [contentlistname] â€“o outputfilename
        where SCgraphfilename is the content graph outputted by Step 1.
        Other parameters are optional

=== Input Format ===
Two input files are required: the graph file and the content list.

Graph file: We are using the basic graph format of METIS (see http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/manual.pdf for the manual). The first line has two numbers: the total number of nodes and the total number of edges (each edge is counted once). The N+1st line is the space-separated, 1-based adjacency list for the Nth node.

Content list: Similarly, the METIS format is used, although technically this is not a graph file. The first line has two numbers: the total number of nodes and the total number of non-zero entries in content vector. The N+1st line is the space-separated, 1-based content list for the Nth node.

The numbering of nodes in two files should be consistent. That is, the Nth node in the graph file should also be the Nth node in the content list.

=== Output Format ===
The output will be a graph file of the METIS format.

=== Contact ===
Please kindly contact Yiye Ruan at ruan@cse.ohio-state.edu for questions, suggestions, or bug reports.

=== Reference ===
Please consider citing this paper in your research work:

    Ruan, Yiye, David Fuhry, and Srinivasan Parthasarathy. "Efficient community detection in large networks using content and links." WWW 2013.

or BibTeX:

    @inproceedings{ruan2013efficient,
        title={Efficient community detection in large networks using content and links},
        author={Ruan, Yiye and Fuhry, David and Parthasarathy, Srinivasan},
        booktitle={Proceedings of the 22nd international conference on World Wide Web},
        pages={1089--1098},
        year={2013},
        organization={International World Wide Web Conferences Steering Committee}
    }


Yiye Ruan
Last edited: 01/31/2014

Credits: Venu Satuluri, David Fuhry, Jaewon Yang, Linhong Zhu
